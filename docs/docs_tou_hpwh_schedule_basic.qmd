---
title: "First-Pass TOU Scheduling Decision Model for HPWHs in OCHRE"
author: "Switchbox"
date: "2025-06-23"
format: gfm
---
# Introduction

This document outlines a simple, first-pass heuristic-based decision model for consumer response to time-of-use (TOU) electricity rates in residential building simulations using OCHRE, focusing on Heat Pump Water Heaters (HPWHs). The goal is to integrate an adaptive control schedule for the HPWH based on feedback from utility bills and anticipated cost savings, while accounting for consumer effort in shifting schedules.

# 1. Problem Definition
This section establishes a high-level overview of the core research question and modeling assumptions for consumer response to TOU rates.

**Objective:**

Model how a consumer, already on TOU electricity rates, might switch from default HPWH operation to a TOU-friendly schedule based on imperfect information and behavioral biases, considering switching costs and learning through trial-and-error.

**Assumptions:**

  - Hot water usage schedule is fixed (not flexible) and set by inputs to the model.

  - HPWH can be controlled (on/off) on a schedule.

  - Consumer is already on TOU rates (given) and receives aggregate monthly bills without appliance-level breakdowns.

  - Consumer receives only generic utility guidance (e.g., "customers typically save $15-25/month") rather than household-specific building simulations.

  - Decision-making occurs at monthly bill receipt based on imperfect information, social learning, and behavioral biases.

  - Switching between default and TOU-friendly HPWH schedules incurs effort costs and comfort trade-offs.

  - Consumers learn through trial-and-error with noisy feedback, forming reference points from recent bill history.

  - Decision process incorporates loss aversion (bill increases feel worse than equivalent savings) and habit formation.

# 2. Key Variables and Parameters
This section defines all variables, parameters, and their temporal dimensions used throughout the decision model. Note that at the beginning of each month, the model is initialized with the previous month's decision outcome, and the model is repeated for each month of the year, or however many months are specified in the simulation.

| Symbol         | Type | Description                                           | Units    | Dimension |
|----------------|------|-------------------------------------------------------|----------|-----------|
| **Sets** |
| $M$        | Set  | Months in simulation year, $m \in \{1, 2, ..., 12\}$ | -        | 12 × 1    |
| $T$        | Set  | Time periods in billing month, $t \in \{1, 2, ..., T\}$ where $T \approx 2976$ (15-min intervals) | -        | \|T\| × 1  |
| $H$        | Set  | Peak hour periods, $H \subset T$                 | -        | \|H\| × 1 |
| **Parameters** |
| $U_{m,t}^{HW}$ | Parameter | Exogenous hot water usage schedule at time $t$ in month $m$ | L/15min  | M × T     |
| $r^{on}$   | Parameter | TOU electricity rate during peak hours              | $/kWh    | 1 × 1     |
| $r^{off}$  | Parameter | TOU electricity rate during off-peak hours          | $/kWh    | 1 × 1     |
| $C^{switch,to}$ | Parameter | Consumer switching cost from default to TOU schedule | $        | 1 × 1     |
| $C^{switch,back}$ | Parameter | Consumer switching cost from TOU back to default schedule | $        | 1 × 1     |
| $\alpha$   | Parameter | Monetization factor for comfort penalty (building-specific) | $/kWh    | 1 × 1     |
| $T_{m,t}^{setpoint}$ | Parameter | Hot water temperature setpoint at time $t$ in month $m$ | °C | M × T |
| $T_{m,t}^{ambient}$ | Parameter | Ambient water temperature at time $t$ in month $m$ | °C | M × T |
| $\rho$     | Parameter | Water density                                         | kg/L     | 1 × 1     |
| $c_p$      | Parameter | Specific heat of water                               | J/kg·°C  | 1 × 1     |
| $COP$      | Parameter | Heat pump coefficient of performance                 | -        | 1 × 1     |
| **Decision Variables** |
| $x_m^{switch}$ | Binary | Decision to switch schedule in month $m$ (1 = switch, 0 = stay) | binary | M × 1 |
| **Behavioral Parameters** |
| $\lambda$ | Parameter | Loss aversion coefficient for bill increases | - | 1 × 1 |
| $\sigma_{utility}$ | Parameter | Noise in utility savings estimates | $ | 1 × 1 |
| $w$ | Parameter | Memory window for reference point (months) | months | 1 × 1 |
| **State Variables** |
| $S_m^{current}$ | Binary | Current schedule state in month $m$ (1 = default, 0 = TOU-adapted) | binary | M × 1 |
| $s_{m,t}$  | Binary | HPWH operation permission at time $t$ in month $m$ (1 = allowed, 0 = restricted) | binary | M × T |
| $r_{m,t}$  | Variable | Electricity rate at time $t$ in month $m$ (determined by peak/off-peak) | $/kWh | M × T |
| $E_{m,t}$  | Variable | Electricity consumption from HPWH operation at time $t$ in month $m$ | kWh/15min | M × T |
| $T_{m,t}^{tank}$ | Variable | Tank water temperature at time $t$ in month $m$ | °C | M × T |
| $Q_{m,t}^{unmet}$ | Variable | Thermal unmet demand at time $t$ in month $m$ | J/15min | M × T |
| $D_{m,t}^{unmet}$ | Variable | Electrical equivalent unmet demand at time $t$ in month $m$ | kWh/15min | M × T |
| **Derived Variables** |
| $C_m^{bill}$ | Variable | Monthly electricity bill for water heating in month $m$ | $ | M × 1 |
| $C_m^{comfort}$ | Variable | Monthly comfort penalty from unmet demand in month $m$ | $ | M × 1 |
| $\Delta C_m$ | Variable | Realized bill savings from TOU schedule vs. default in month $m$ | $ | M × 1 |
| **Behavioral State Variables** |
| $\bar{C}_m^{ref}$ | Variable | Reference point for bills (w-month rolling average) | $ | M × 1 |
| $\hat{\Delta C}_m^{utility}$ | Variable | Utility's noisy estimate of potential savings | $ | M × 1 |

## 2.1 Building-Specific Parameter Formulations

The switching costs and comfort monetization factors are derived from building and household characteristics available in ResStock/OCHRE simulations to reflect realistic heterogeneity in consumer behavior.

### Switching Cost Parameters

**Switch to TOU Schedule Cost ($C^{switch,to}$):**

The cost of switching from default to TOU operation reflects the mental effort and complexity of programming a water heater schedule. This cost depends on household characteristics that affect the perceived difficulty and opportunity cost of the task.

$$
C^{switch,to} = C \times f_{AMI} \times f_{age} \times f_{residents} \times f_{WH}
$$

Where:

- $C$ = base switching cost for average household (to be calibrated)

- $f_{AMI} = \sqrt{\frac{AMI}{80\%}}$ (income factor: square root relationship reflects diminishing marginal utility of income, normalized to 80% AMI median income benchmark)

- $f_{age} = 1.0 + 0.005 \times \max(0, 2000 - YearBuilt)$ (building age proxy for household tech-savviness: older buildings correlate with older residents who may find technology more challenging; linear 0.5% increase per year before 2000 aligns with pre-internet adoption era)

- $f_{residents} = 1.0 + 0.1 \times \ln(N_{residents})$ (coordination complexity: logarithmic relationship reflects decreasing marginal coordination difficulty as households develop systems for multi-person decisions)

- $f_{WH} = \{1.0 \text{ (storage)}, 1.5 \text{ (tankless)}, 0.7 \text{ (heat pump)}\}$ (water heater type complexity: tankless units often lack scheduling capabilities, heat pumps typically have smart controls, storage units have simple timers)

**Switch Back to Default Cost ($C^{switch,back}$):**

The cost of reverting to default operation is lower since it involves returning to a familiar state and typically requires less complex programming (often just "reset to factory settings").

$$
C^{switch,back} = 0.4 \times C^{switch,to}
$$

The 0.4 factor reflects that reverting to default is easier than initial programming but still requires some effort to locate and execute reset procedures.

### Comfort Monetization Factor

**Comfort Penalty Monetization ($\alpha$):**

The monetization factor represents how much households value avoiding unmet hot water demand and varies with income, household size, and climate sensitivity.

$$
\alpha = \alpha_{base} \times g_{AMI} \times g_{residents} \times g_{climate}
$$

Where:

- $\alpha_{base}$ = base comfort value for average household (to be calibrated)

- $g_{AMI} = (\frac{AMI}{80\%})^{0.6}$ (income factor: power function <1 reflects decreasing marginal utility of income; 0.6 exponent based on typical income elasticity of demand for comfort goods)

- $g_{residents} = 1.0 + 0.2 \times (N_{residents} - 1)$ (household size effect: each additional person increases conflict probability by 20%, reflecting realistic scheduling conflicts over hot water usage)

- $g_{climate} = \{0.8 \text{ (zones 1-3)}, 1.0 \text{ (zones 4-5)}, 1.2 \text{ (zones 6-8)}\}$ (climate zone factor: colder climates increase hot water importance by 20% per major zone group, based on observed regional energy consumption patterns)

**Example:** For a mid-income family (80% AMI, 3 residents, 1980 building, storage water heater, zone 4): $C^{switch,to} = C \times 1.0 \times 1.1 \times 1.11 \times 1.0 = 1.22C$ and $\alpha = \alpha_{base} \times 1.0 \times 1.4 \times 1.0 = 1.4\alpha_{base}$.

# 3. Detailed Model Steps

This section outlines the complete sequential decision-making process that consumers follow each month under imperfect information and bounded rationality. Consumers rely on heuristic decision rules, noisy utility estimates, and behavioral biases when making switching decisions.

## Step 1: Initialize Monthly State Variables

This step loads the exogenous input data and sets the initial state variables for month $m$'s simulation. The hot water usage profile $U_{m,t}^{HW}$ defines when and how much hot water is demanded throughout the month's 2976 time periods. Temperature setpoints $T_{m,t}^{setpoint}$ and ambient conditions $T_{m,t}^{ambient}$ establish the thermal boundary conditions for month $m$. The electricity rate vector $r_{m,t}$ is constructed by mapping peak hours set $H$ to the on-peak rate $r^{on}$ and all other periods to off-peak rate $r^{off}$.

**Set Time-Varying Parameters for Month $m$:**

- Load hot water usage schedule: $U_{m,t}^{HW}$ for all $t \in T$

- Load temperature profiles: $T_{m,t}^{setpoint}$, $T_{m,t}^{ambient}$ for all $t \in T$

- Set electricity rates: $r_{m,t} = r^{on}$ if $t \in H$, else $r_{m,t} = r^{off}$

**Initialize Schedule State for Month $m$:**

- If $m = 1$: set $S_m^{current} = 1$ (start on default schedule)

- Else: $S_m^{current} = S_{m-1}^{current,next}$ (use previous month's decision outcome)

**Set Operational Schedule for Month $m$:**

The binary operation permission vector $s_{m,t}$ is derived from the current schedule state $S_m^{current}$. When $S_m^{current} = 1$ (default), the HPWH can operate whenever needed ($s_{m,t} = 1$ for all $t$). When $S_m^{current} = 0$ (TOU-adapted), operation is restricted during peak hours ($s_{m,t} = 0$ when $t \in H$).

$$
s_{m,t} = \begin{cases}
1 & \text{if } S_m^{current} = 1 \text{ (default: always allowed)} \\
1 & \text{if } S_m^{current} = 0 \text{ and } t \notin H \text{ (TOU: off-peak only)} \\
0 & \text{if } S_m^{current} = 0 \text{ and } t \in H \text{ (TOU: peak restricted)}
\end{cases}
$$

## Step 2: Run OCHRE Simulation for Month $m$

OCHRE executes the building physics simulation for month $m$ using the operational schedule $s_{m,t}$ as a constraint on HPWH operation. For each 15-minute interval $t$ in month $m$, OCHRE determines whether the HPWH can operate based on $s_{m,t}$, then calculates the resulting electricity consumption $E_{m,t}$ and tank temperature $T_{m,t}^{tank}$ considering hot water draws $U_{m,t}^{HW}$, thermal losses, and ambient conditions $T_{m,t}^{ambient}$. The monthly electricity bill is computed by summing the product of consumption and time-varying rates across all time periods in month $m$.

**Execute Monthly Simulation for Month $m$:**

- Input: $U_{m,t}^{HW}$, $s_{m,t}$, $T_{m,t}^{setpoint}$, $T_{m,t}^{ambient}$ for all $t \in T$

- Output: $E_{m,t}$, $T_{m,t}^{tank}$ for all $t \in T$

**Calculate Monthly Electricity Bill for Month $m$:**

$$
C_m^{bill} = \sum_{t \in T} E_{m,t} \cdot r_{m,t}
$$

Note that this bill is specific to the HPWH, and does not include other electricity loads in the building. In practice, consumers get a bill that includes all of their electricity usage, and the HPWH bill is a subset of that. However, since other operations remain the same, and we are only changing the HPWH, we don't need to include other loads in the model.

## Step 3: Assess Comfort Performance for Month $m$

Comfort assessment for month $m$ begins by identifying time periods where tank temperature $T_{m,t}^{tank}$ falls below the setpoint $T_{m,t}^{setpoint}$ during hot water usage events ($U_{m,t}^{HW} > 0$). For each such period, the thermal energy shortfall $Q_{m,t}^{unmet}$ is calculated as the energy required to heat the delivered water from tank temperature to setpoint temperature, using water density $\rho$ and specific heat $c_p$. This thermal deficit is then converted to electrical energy equivalent $D_{m,t}^{unmet}$ by dividing by the heat pump's coefficient of performance $COP$ and converting from Joules to kWh. The total comfort penalty for month $m$, $C_m^{comfort}$, monetizes these electrical energy equivalents using the comfort parameter $\alpha$.

**Calculate Thermal Unmet Demand for Month $m$:**

$$
Q_{m,t}^{\text{unmet}} = \begin{cases}
U_{m,t}^{\text{HW}} \cdot \rho \cdot c_p \cdot (T_{m,t}^{\text{setpoint}} - T_{m,t}^{\text{tank}}) & \text{if } T_{m,t}^{\text{tank}} < T_{m,t}^{\text{setpoint}} \text{ and } U_{m,t}^{\text{HW}} > 0 \\
0 & \text{otherwise}
\end{cases}
$$

**Convert to Electrical Equivalent for Month $m$:**

$$
D_{m,t}^{unmet} = \frac{Q_{m,t}^{unmet}}{COP \cdot 3,600,000}
$$

**Calculate Monthly Comfort Penalty for Month $m$:**

$$
C_m^{comfort} = \alpha \cdot \sum_{t \in T} D_{m,t}^{unmet}
$$

## Step 4: Decision Logic for Month $m$

Consumers make switching decisions based on noisy utility estimates.

**Generate Utility's Noisy Estimate for Month $m$:**

$$\hat{\Delta C}_m^{utility} = \Delta C_m^{true} + \mathcal{N}(0, \sigma_{utility}^2)$$

Where $\Delta C_m^{true}$ is the actual counterfactual savings and $\sigma_{utility}$ captures utility estimate noise.

**Branch based on current schedule state $S_m^{current}$:**

### Case A: Currently on Default Schedule ($S_m^{current} = 1$)

Consumers on the default schedule receive the utility's noisy estimate of potential savings from switching to TOU-friendly scheduling.

**Step 4A.1: Receive Utility Guidance**

Utility provides noisy estimate (behind the scenes, runs counterfactual simulation):
- Run temporary TOU simulation: set $S_m^{temp} = 0$, get $E_{m,t}^{TOU}$
- Calculate true savings: $\Delta C_m^{true} = C_m^{bill} - \sum_{t \in T} E_{m,t}^{TOU} \cdot r_{m,t}$
- Consumer receives: $\hat{\Delta C}_m^{utility} = \Delta C_m^{true} + \mathcal{N}(0, \sigma_{utility}^2)$

**Step 4A.2: Form Reference Point and Assess Risk**

Consumer forms reference point from recent bill history:
$$\bar{C}_m^{ref} = \frac{1}{\min(w, m-1)} \sum_{j=1}^{\min(w, m-1)} C_{m-j}^{bill}$$

**Loss aversion evaluation**:
$$\text{Perceived Value}_m = \hat{\Delta C}_m^{utility} - \lambda \times \max(0, -\hat{\Delta C}_m^{utility})$$

**Step 4A.3: Switching Decision**

$$x_m^{switch} = \begin{cases}
1 & \text{if } \text{Perceived Value}_m > C^{switch,to} \\
0 & \text{otherwise}
\end{cases}$$

### Case B: Currently on TOU-Friendly Schedule ($S_m^{current} = 0$)

Consumers with TOU-friendly scheduling receive the utility's noisy estimate of what their bill would have been under default scheduling and experience actual comfort impacts.

**Step 4B.1: Receive Utility Counterfactual Estimate**

Utility provides noisy estimate of alternative (default) bill:
- Run temporary default simulation: set $S_m^{temp} = 1$, get $E_{m,t}^{default}$
- Calculate true counterfactual: $C_m^{bill,default,true} = \sum_{t \in T} E_{m,t}^{default} \cdot r_{m,t}$
- Consumer receives: $\hat{C}_m^{bill,default} = C_m^{bill,default,true} + \mathcal{N}(0, \sigma_{utility}^2)$

**Step 4B.2: Evaluate Realized Performance with Noise**

Consumer compares actual experience to noisy counterfactual:
$$\hat{\Delta C}_m^{realized} = \hat{C}_m^{bill,default} - C_m^{bill}$$

Incorporate actual comfort costs:
$$\text{Net Savings}_m^{perceived} = \hat{\Delta C}_m^{realized} - C_m^{comfort} - C^{switch,back}$$

**Step 4B.3: Continuation Decision**

$$x_m^{switch} = \begin{cases}
1 & \text{if } \text{Net Savings}_m^{perceived} < -C^{switch,back} \text{ (switch back to default)} \\
0 & \text{otherwise (stay on TOU)}
\end{cases}$$

## Step 5: Update State for Next Month

The schedule state $S_{m+1}^{current}$ for the next month is determined by the switching decision $x_m^{switch}$ made in month $m$. If switching occurs ($x_m^{switch} = 1$), the state toggles to its opposite value ($1 - S_m^{current}$). If no switching occurs ($x_m^{switch} = 0$), the state remains unchanged. Monthly results for month $m$ including $C_m^{bill}$, $C_m^{comfort}$, $x_m^{switch}$, and $S_m^{current}$ are recorded for annual analysis.

**Update Schedule State for Month $m+1$:**

$$
S_{m+1}^{current} = \begin{cases}
1 - S_m^{current} & \text{if } x_m^{switch} = 1 \\
S_m^{current} & \text{if } x_m^{switch} = 0
\end{cases}
$$

**Store Monthly Results for Month $m$:**

- Record: $C_m^{bill}$, $C_m^{comfort}$, $x_m^{switch}$, $S_m^{current}$

- Save for annual analysis and next month's initialization

## Step 6: Monthly Iteration Control

The simulation checks whether the annual cycle is complete. If the current month $m < 12$, the month counter increments and the process returns to Step 1 with month $m+1$ and the updated schedule state $S_{m+1}^{current}$. If month 12 is complete, the simulation proceeds to annual evaluation metrics calculation.

**Check Simulation Status:**

- If $m < 12$: increment to month $m+1$, return to Step 1 with $S_{m+1}^{current}$

- If $m = 12$: proceed to annual evaluation (Step 7)

## Step 7: Annual Evaluation and State Reset

For multi-year simulations, the final month's schedule state $S_{13}^{current}$ becomes the initial state for the following year's first month, allowing persistence of consumer preferences across years. Before resetting for the next annual cycle, comprehensive evaluation metrics are calculated and key visualizations are generated to assess model performance and consumer behavior patterns.

### Step 7.1: Calculate Annual Performance Metrics

**Financial Performance:**

$$
\text{Total Annual Savings} = \sum_{m=1}^{12} \Delta C_m^{realized}
$$

$$
\text{Total Switching Costs} = \sum_{m=1}^{12} x_m^{switch} \cdot \begin{cases}
C^{switch,to} & \text{if switching from default to TOU} \\
C^{switch,back} & \text{if switching from TOU to default}
\end{cases}
$$

$$
\text{Total Comfort Penalty} = \sum_{m=1}^{12} C_m^{comfort}
$$

$$
\text{Net Annual Benefit} = \text{Total Annual Savings} - \text{Total Switching Costs} - \text{Total Comfort Penalty}
$$

**Behavioral Metrics:**

$$
\text{TOU Adoption Rate} = \frac{\sum_{m=1}^{12} (1 - S_m^{current})}{12} \times 100\%
$$

$$
\text{Annual Switches} = \sum_{m=1}^{12} x_m^{switch}
$$

$$
\text{Average Monthly Bill} = \frac{1}{12} \sum_{m=1}^{12} C_m^{bill}
$$

**System Performance:**

$$
\text{Peak Load Reduction} = \frac{\sum_{m=1}^{12} \sum_{t \in H} (E_{m,t}^{baseline} - E_{m,t})}{\sum_{m=1}^{12} \sum_{t \in H} E_{m,t}^{baseline}} \times 100\%
$$

### Step 7.2: Generate Key Visualizations

**A. Annual Decision Timeline**

- Line plot showing $S_m^{current}$ across months with switching events $x_m^{switch}$ marked

- Purpose: Visualize adoption patterns and decision stability

**B. Monthly Cost Decomposition**

- Stacked bar chart with $C_m^{bill}$, $C_m^{comfort}$, and switching costs for each month

- Purpose: Show relative impact of each cost component

**C. Performance Scatter Plot**

- X-axis: $C_m^{comfort}$, Y-axis: $\Delta C_m^{realized}$, color-coded by $S_m^{current}$

- Purpose: Identify trade-offs between savings and comfort

**D. Load Profile Heatmap**

- 2D plot: months (x-axis) vs. hours (y-axis), color intensity = average $E_{m,t}$

- Purpose: Visualize seasonal and daily load shifting patterns

### Step 7.3: Reset for Next Year

**Prepare for Next Year:**

- Set $S_1^{current} = S_{13}^{current}$ (carry forward final state)

- Clear monthly arrays: $\{C_m^{bill}, C_m^{comfort}, x_m^{switch}, S_m^{current}\}_{m=1}^{12}$

- Update annual parameters (e.g., rate changes, equipment degradation)

- Export annual metrics to results database

- Return to Step 1 for new annual cycle with $m = 1$

This evaluation framework provides both quantitative metrics for model validation and intuitive visualizations for understanding consumer behavior patterns and system-wide impacts.

## State space diagram

```{mermaid}
stateDiagram-v2
  [*] --> S_default: "First month"
  S_default --> S_TOU: Switch to TOU<br/>Net Anticipated Savings > 0
  S_default --> S_default: Stay<br/>Net Anticipated Savings ≤ 0
  S_TOU --> S_default: Switch back to Default<br/>Net Realized Savings ≤ 0
  S_TOU --> S_TOU: Stay<br/>Net Realized Savings > 0
  S_default: Default Schedule (S(current)=1)
  S_TOU: TOU-adapted Schedule (S(current)=0)
```

## Consumer Information and Decision-Making Reality

### How Utilities Provide Information to Consumers

Consumers receive noisy estimates from utilities. Utilities offer generic guidance based on average customer patterns.

#### **What Utilities Actually Provide**

**Generic Savings Estimates:**

The utility provides Sarah with a simplified estimate: "Customers who shift water heating to off-peak hours typically save $15-30 per month, based on average usage patterns." This estimate comes from:
- Average load profiles (not Sarah's specific building)
- Simplified weather assumptions
- Generic water heater efficiency estimates
- Rounded/smoothed results for communication

**Noisy Monthly Comparisons:**

Each month, the utility shows: "If you had used default water heater scheduling this month, your estimated bill would have been $X" - but this estimate has uncertainty due to:
- Simplified counterfactual simulations
- Average building characteristics rather than Sarah's specific home
- Communication rounding (shown as "$15-20 savings" rather than "$17.43")

**Social Reference Points:**

The utility provides context like: "Similar customers in your area saved an average of $18/month last year with TOU-friendly water heater scheduling" - creating social reference points with built-in noise from averaging across different households.

#### **How Consumers Process Utility Information**

**Loss Aversion Response:**

Sarah receives the utility estimate but focuses disproportionately on potential losses: "What if it doesn't save $20 and instead costs me more? That would feel terrible." The fear of bill increases weighs more heavily than equivalent potential savings.

**Reference Point Formation:**

Sarah forms expectations based on:
- Recent months' bill performance under current schedule
- Utility's noisy estimates with built-in uncertainty
- Social comparisons to neighbors (also noisy)
- Simple mental models: "Maybe I can save 20% of my water heating costs"

**Bounded Rationality in Action:**

Rather than optimizing, Sarah uses satisficing rules:
- "If the utility says I might save $15-30, and my current bills are high, it's worth trying for a few months"
- "I'll try it and see how my next 2-3 bills look compared to the same months last year"
- Status quo bias: "It seems like too much work to change unless I'm really confident"

#### **Implications for Model Design**

This realistic information environment suggests the model should:

$$
\hat{\Delta C}_m^{utility} = \Delta C_m^{true} + \mathcal{N}(0, \sigma_{utility}^2)
$$

Where consumers receive the **actual counterfactual savings plus noise** representing:
- Utility's simplified modeling assumptions
- Communication uncertainty and rounding
- Generic rather than building-specific estimates

Decision-making incorporates:
- **Loss aversion**: $\lambda > 1$ weighting on potential bill increases
- **Reference points**: Rolling averages of recent bill performance
- **Switching costs**: Resistance to changing strategies

# 4. Behavioral Framework

This section formalizes the key behavioral economics concepts implemented in the decision model.

## 4.1 Information Processing

Consumers receive noisy utility estimates: $\hat{\Delta C}_m^{utility} = \Delta C_m^{true} + \mathcal{N}(0, \sigma_{utility}^2)$ and make decisions based on heuristics.

## 4.2 Loss Aversion and Reference Dependence

**Reference Point Formation:**
$$\bar{C}_m^{ref} = \frac{1}{\min(w, m-1)} \sum_{j=1}^{\min(w, m-1)} C_{m-j}^{bill}$$

**Loss Aversion in Evaluation:**
Potential bill increases are weighted more heavily than equivalent savings:
$$\text{Perceived Value}_m = \hat{\Delta C}_m^{utility} - \lambda \times \max(0, -\hat{\Delta C}_m^{utility})$$

Where $\lambda > 1$ (typically 2-2.5) reflects that losses feel approximately twice as painful as equivalent gains.

## 4.3 Switching Costs

Switching costs create behavioral resistance to changing strategies:

- $C^{switch,to}$: Effort cost of programming TOU-friendly schedule
- $C^{switch,back}$: Effort cost of reverting to default schedule

## 4.4 Learning Through Trial and Error

Consumers experiment based on noisy utility guidance and update reference points based on realized bill performance.

# Examples

```{python}
#| label: plot-water-heating-comparison
#| echo: false
#| fig-cap: "Water Heating Electric Power Comparison: Default vs TOU Schedule"

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from pathlib import Path

# File paths - use relative path from workspace root
import os
base_path = Path("../data")
default_file = base_path / "bldg0000072-up03_default.csv"
tou_file = base_path / "bldg0000072-up03_tou.csv"


# Check if files exist
if not default_file.exists():
    raise FileNotFoundError(f"Default simulation file not found: {default_file}")
if not tou_file.exists():
    raise FileNotFoundError(f"TOU simulation file not found: {tou_file}")

# Load data
default_df = pd.read_csv(default_file, parse_dates=['Time'])
tou_df = pd.read_csv(tou_file, parse_dates=['Time'])

# Extract water heating power data
default_power = default_df['Water Heating Electric Power (kW)']
tou_power = tou_df['Water Heating Electric Power (kW)']
time_index = default_df['Time']

# Limit to first 7 days (or less if data is shorter)
seven_days = pd.Timedelta(days=7)
end_time = time_index.min() + seven_days
max_time = min(end_time, time_index.max())

# Filter data to first 7 days
mask = time_index <= max_time
default_power_7d = default_power[mask]
tou_power_7d = tou_power[mask]
time_index_7d = time_index[mask]

# Create the plot with two y-axes
fig, ax1 = plt.subplots(figsize=(15, 8))

# Plot power data on primary y-axis (left)
ax1.plot(time_index_7d, default_power_7d, label='Default Schedule', alpha=0.7, linewidth=2.5, color='blue')
ax1.plot(time_index_7d, tou_power_7d, label='TOU Schedule', alpha=0.7, linewidth=2.5, color='orange')
ax1.set_xlabel('Time', fontsize=16)
ax1.set_ylabel('Water Heating Electric Power (kW)', color='black', fontsize=16)
ax1.tick_params(axis='y', labelcolor='black')
ax1.grid(True, alpha=0.3)

# Format x-axis to show dates nicely
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
ax1.xaxis.set_major_locator(mdates.DayLocator(interval=1))  # Show every day
ax1.tick_params(axis='x', labelsize=14)  # Set x-axis tick fontsize
fig.autofmt_xdate()  # Rotate and align the tick labels

# Create secondary y-axis for TOU rates
ax2 = ax1.twinx()

# Extract water heating mode data and convert to TOU rates
tou_mode = tou_df['Water Heating Mode'][mask]  # Use same mask for 7-day subset
tou_rates = (tou_mode == 'Upper On').astype(float)  # 1 for "Upper On", 0 for "Off"
tou_rates = tou_rates * 0.12 + (1 - tou_rates) * 0.48  # Convert to actual rates: 0.12 for "Upper On", 0.48 for "Off"

# Plot TOU rates data on secondary y-axis (right)
ax2.plot(time_index_7d, tou_rates, label='TOU Rates ($/kWh)',
         alpha=0.5, linewidth=2.5, color='green', linestyle='--')
ax2.set_ylabel('TOU Rates ($/kWh)', color='green', fontsize=16)
ax2.tick_params(axis='y', labelcolor='green')
ax2.set_ylim(0.05, 0.55)  # Set y-axis limits for rate data

# Add legends
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper right', fontsize=16)

plt.title('Water Heating Electric Power and TOU Rates Comparison: Default vs TOU Schedule', fontsize=20)

plt.tight_layout()
```

```{python}
#| label: plot-temperature-comparison
#| echo: false
#| fig-cap: "Hot Water Outlet Temperature and TOU Rates Comparison: Default vs TOU Schedule"

# Create second plot for hot water outlet temperature
fig2, ax3 = plt.subplots(figsize=(15, 8))

# Extract hot water outlet temperature data
default_temp = default_df['Hot Water Outlet Temperature (C)']
tou_temp = tou_df['Hot Water Outlet Temperature (C)']

# Extract deadband limits (using TOU data for consistency)
deadband_upper = tou_df['Water Heating Deadband Upper Limit (C)']
deadband_lower = tou_df['Water Heating Deadband Lower Limit (C)']

# Filter data to first 7 days
default_temp_7d = default_temp[mask]
tou_temp_7d = tou_temp[mask]
deadband_upper_7d = deadband_upper[mask]
deadband_lower_7d = deadband_lower[mask]

# Plot temperature data on primary y-axis (left)
ax3.plot(time_index_7d, default_temp_7d, label='Default Schedule', alpha=0.7, linewidth=2.5, color='blue')
ax3.plot(time_index_7d, tou_temp_7d, label='TOU Schedule', alpha=0.7, linewidth=2.5, color='orange')
ax3.plot(time_index_7d, deadband_upper_7d, label='Deadband Upper Limit', alpha=0.5, linewidth=2.5, color='red')
ax3.plot(time_index_7d, deadband_lower_7d, label='Deadband Lower Limit', alpha=0.5, linewidth=2.5, color='red')
ax3.set_xlabel('Time', fontsize=16)
ax3.set_ylabel('Hot Water Outlet Temperature (°C)', color='black', fontsize=16)
ax3.tick_params(axis='y', labelcolor='black')
ax3.grid(True, alpha=0.3)

# Format x-axis to show dates nicely
ax3.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
ax3.xaxis.set_major_locator(mdates.DayLocator(interval=1))  # Show every day
ax3.tick_params(axis='x', labelsize=14)  # Set x-axis tick fontsize
fig2.autofmt_xdate()  # Rotate and align the tick labels

# Create secondary y-axis for TOU rates (same as first plot)
ax4 = ax3.twinx()

# Plot TOU rates data on secondary y-axis (right) - same data as first plot
ax4.plot(time_index_7d, tou_rates, label='TOU Rates ($/kWh)',
         alpha=0.5, linewidth=2, color='green', linestyle='--')
ax4.set_ylabel('TOU Rates ($/kWh)', color='green', fontsize=16)
ax4.tick_params(axis='y', labelcolor='green')
ax4.set_ylim(0.05, 0.55)  # Set y-axis limits for rate data

# Add legends
lines3, labels3 = ax3.get_legend_handles_labels()
lines4, labels4 = ax4.get_legend_handles_labels()
ax3.legend(lines3 + lines4, labels3 + labels4, loc='upper right', fontsize=16)

plt.title('Hot Water Outlet Temperature and TOU Rates Comparison: Default vs TOU Schedule', fontsize=20)

plt.tight_layout()
```

```{python}
#| label: plot-monthly-bills
#| echo: false
#| fig-cap: "Monthly Electricity Bills with TOU State Highlighting"

# Load monthly bills data from both simulations
default_bills_file = base_path / "default_monthly_bills_and_comfort_penalties.csv"
tou_bills_file = base_path / "tou_monthly_bills_and_comfort_penalties.csv"
monthly_results_file = base_path / "bldg0000072-up03_monthly_results.csv"

default_bills_df = pd.read_csv(default_bills_file)
tou_bills_df = pd.read_csv(tou_bills_file)
monthly_results_df = pd.read_csv(monthly_results_file)

# Create the plot
fig3, ax5 = plt.subplots(figsize=(15, 8))

# Create month labels for x-axis
month_labels = [f"{row['year']}-{row['month']:02d}" for _, row in monthly_results_df.iterrows()]

# Plot default schedule bills
ax5.plot(range(len(default_bills_df)), default_bills_df['monthly_bills'], 'o-', linewidth=2.5, markersize=8,
         color='blue', alpha=0.7, label='Default Schedule')

# Plot TOU schedule bills
ax5.plot(range(len(tou_bills_df)), tou_bills_df['monthly_bills'], 'o-', linewidth=2.5, markersize=8,
         color='red', alpha=0.7, label='TOU Schedule')

# Highlight periods when consumer was actually on TOU
tou_mask = monthly_results_df['current_state'] == 'tou'
if tou_mask.any():
    # Find consecutive TOU periods to create background shading
    tou_periods = []
    start_idx = None
    for i, is_tou in enumerate(tou_mask):
        if is_tou and start_idx is None:
            start_idx = i
        elif not is_tou and start_idx is not None:
            tou_periods.append((start_idx, i-1))
            start_idx = None
    # Handle case where TOU period extends to the end
    if start_idx is not None:
        tou_periods.append((start_idx, len(tou_mask)-1))

    # Add background shading for TOU periods
    for start, end in tou_periods:
        ax5.axvspan(start-0.5, end+0.5, alpha=0.3, color='green', label='TOU Periods' if start == tou_periods[0][0] else "")

# Customize the plot
ax5.set_xlabel('Month', fontsize=16)
ax5.set_ylabel('Monthly Electricity Bill ($)', fontsize=16)
ax5.set_title('Monthly Electricity Bills: Default vs TOU Schedules', fontsize=20)
ax5.grid(True, alpha=0.3)
ax5.legend(fontsize=14)

# Set x-axis ticks to show month labels
ax5.set_xticks(range(len(monthly_results_df)))
ax5.set_xticklabels(month_labels, rotation=45, ha='right', fontsize=12)

plt.tight_layout()
```
